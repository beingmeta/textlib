;;; -*- Mode: Scheme; Character-encoding: utf-8; -*-
;;; Copyright (C) 2005-2020 beingmeta, inc.  All rights reserved.
;;; Copyright (C) 2020-2022 Kenneth Haase (ken.haase@alum.mit.edu).

(in-module 'text/dataframes)

(module-export! '{rows->frames})

(use-module '{texttools varconfig brico/indexing})

(define %volatile '{oid-indexfns})

(define-init default-fieldfns (make-hashtable))
(config-def! 'dataframe:fieldfn
  (lambda (var (val))
    (cond ((unbound? val) default-fieldfns)
	  ((table? val)
	   (do-choices (slotid (getkeys val))
	     (add! default-fieldfns slotid (get val slotid))))
	  (else (irritant val |BadFieldFn|)))))

(define-init default-indexfns (make-hashtable))
(config-def! 'dataframe:indexfn
  (lambda (var (val))
    (cond ((unbound? val) default-indexfns)
	  ((table? val)
	   (do-choices (slotid (getkeys val))
	     (add! default-indexfns slotid (get val slotid))))
	  (else (irritant val |BadFieldFn|)))))

(define-init pool-indexfns (make-hashtable))
(config-def! 'pool:indexfns
  (lambda (var (val))
    (cond ((unbound? val) pool-indexfns)
	  ((table? val)
	   (do-choices (slotid (getkeys val))
	     (add! pool-indexfns slotid (get val slotid))))
	  (else (irritant val |BadFieldFn|)))))

(define-init oid-indexfns {})
(varconfig! dataframe:indexoid oid-indexfns)

(defambda (rows->frames rows schema pool index (opts #f))
  (let ((slotids (make-vector (length schema)))
	(fieldfns (make-vector (length schema)))
	(indexfns (make-vector (length schema)))
	(fieldmap (getopt opts 'fieldmap {}))
	(indexmap (getopt opts 'indexmap {}))
	(fieldfn (getopt opts 'fieldfn))
	(indexfn (getopt opts 'indexfn))
	(indexoids (getopt opts 'indexoids))
	(schema-len (length schema)))
    (doseq (spec schema i)
      (let* ((slotid (if (or (symbol? spec) (oid? spec)) spec
			 (if (string? spec) (string->symbol spec)
			     (if (table? spec)
				 (getopt spec 'slotid)
				 i))))
	     (fieldfn (try (tryif (table? spec) (getopt spec 'fieldfn {}))
			   (get fieldmap slotid)
			   (get default-fieldfns slotid)
			   #f))
	     (indexfn (try (tryif (table? spec) (getopt spec 'indexfn {}))
			   (get indexmap slotid)
			   (get default-indexfns slotid))))
	(vector-set! slotids i slotid)
	(vector-set! fieldfns i fieldfn)
	(vector-set! indexfns i indexfn)))
    (for-choices (row rows)
      (let ((frame (frame-create pool)))
	(doseq (cell row i)
	  (if (< i schema-len)
	      (let ((slotid (elt slotids i))
		    (vals (cond ((elt fieldfns i)
				((elt fieldfns i) cell))
			       (fieldfn (fieldfn cell))
			       (else cell)))
		    (indexfn (try (elt indexfns i) indexfn)))
		(store! frame slotid vals)
		(unless (or (fail? indexfn) (not indexfn))
		  (do-choices (val vals)
		    (cond ((applicable? indexfn)
			   (index-frame index frame slotid (try (indexfn val) val)))
			  ((timestamp? val)
			   (index-frame index frame slotid (get val 'timekeys)))
			  ((string? val)
			   (if (< (length string) 32)
			       (index-string index frame slotid val)
			       (if (compound-string? val)
				   (let ((words (elts (getwords val))))
				     (index-string index frame slotid words))
				   (begin (index-frame index frame slotid val)
				     (index-frame index frame slotid (downcase val))))))
			  ((oid? val)
			   (index-frame index frame slotid val)
			   (index-frame index
			       frame slotid ((get pool-indexfns (oid->pool val)) val))
			   (index-frame index frame slotid (oid-indexfns val))
			   (when indexoids
			     (index-frame index frame slotid (indexoids val))))
			  (else (index-frame index frame slotid val))))))))
	frame))))
